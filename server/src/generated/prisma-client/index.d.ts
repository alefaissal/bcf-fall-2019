// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  audio: (where?: AudioWhereInput) => Promise<boolean>;
  contactInfo: (where?: ContactInfoWhereInput) => Promise<boolean>;
  contactUs: (where?: ContactUsWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  faq: (where?: FaqWhereInput) => Promise<boolean>;
  host: (where?: HostWhereInput) => Promise<boolean>;
  info: (where?: InfoWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  selfGuidedTour: (where?: SelfGuidedTourWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  audio: (where: AudioWhereUniqueInput) => AudioNullablePromise;
  audios: (args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Audio>;
  audiosConnection: (args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AudioConnectionPromise;
  contactInfo: (
    where: ContactInfoWhereUniqueInput
  ) => ContactInfoNullablePromise;
  contactInfoes: (args?: {
    where?: ContactInfoWhereInput;
    orderBy?: ContactInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ContactInfo>;
  contactInfoesConnection: (args?: {
    where?: ContactInfoWhereInput;
    orderBy?: ContactInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactInfoConnectionPromise;
  contactUs: (where: ContactUsWhereUniqueInput) => ContactUsNullablePromise;
  contactUses: (args?: {
    where?: ContactUsWhereInput;
    orderBy?: ContactUsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ContactUs>;
  contactUsesConnection: (args?: {
    where?: ContactUsWhereInput;
    orderBy?: ContactUsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactUsConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  faq: (where: FaqWhereUniqueInput) => FaqNullablePromise;
  faqs: (args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Faq>;
  faqsConnection: (args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FaqConnectionPromise;
  host: (where: HostWhereUniqueInput) => HostNullablePromise;
  hosts: (args?: {
    where?: HostWhereInput;
    orderBy?: HostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Host>;
  hostsConnection: (args?: {
    where?: HostWhereInput;
    orderBy?: HostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HostConnectionPromise;
  info: (where: InfoWhereUniqueInput) => InfoNullablePromise;
  infoes: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Info>;
  infoesConnection: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InfoConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  selfGuidedTour: (
    where: SelfGuidedTourWhereUniqueInput
  ) => SelfGuidedTourNullablePromise;
  selfGuidedTours: (args?: {
    where?: SelfGuidedTourWhereInput;
    orderBy?: SelfGuidedTourOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SelfGuidedTour>;
  selfGuidedToursConnection: (args?: {
    where?: SelfGuidedTourWhereInput;
    orderBy?: SelfGuidedTourOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SelfGuidedTourConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAudio: (data: AudioCreateInput) => AudioPromise;
  updateAudio: (args: {
    data: AudioUpdateInput;
    where: AudioWhereUniqueInput;
  }) => AudioPromise;
  updateManyAudios: (args: {
    data: AudioUpdateManyMutationInput;
    where?: AudioWhereInput;
  }) => BatchPayloadPromise;
  upsertAudio: (args: {
    where: AudioWhereUniqueInput;
    create: AudioCreateInput;
    update: AudioUpdateInput;
  }) => AudioPromise;
  deleteAudio: (where: AudioWhereUniqueInput) => AudioPromise;
  deleteManyAudios: (where?: AudioWhereInput) => BatchPayloadPromise;
  createContactInfo: (data: ContactInfoCreateInput) => ContactInfoPromise;
  updateContactInfo: (args: {
    data: ContactInfoUpdateInput;
    where: ContactInfoWhereUniqueInput;
  }) => ContactInfoPromise;
  updateManyContactInfoes: (args: {
    data: ContactInfoUpdateManyMutationInput;
    where?: ContactInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertContactInfo: (args: {
    where: ContactInfoWhereUniqueInput;
    create: ContactInfoCreateInput;
    update: ContactInfoUpdateInput;
  }) => ContactInfoPromise;
  deleteContactInfo: (where: ContactInfoWhereUniqueInput) => ContactInfoPromise;
  deleteManyContactInfoes: (
    where?: ContactInfoWhereInput
  ) => BatchPayloadPromise;
  createContactUs: (data: ContactUsCreateInput) => ContactUsPromise;
  updateContactUs: (args: {
    data: ContactUsUpdateInput;
    where: ContactUsWhereUniqueInput;
  }) => ContactUsPromise;
  updateManyContactUses: (args: {
    data: ContactUsUpdateManyMutationInput;
    where?: ContactUsWhereInput;
  }) => BatchPayloadPromise;
  upsertContactUs: (args: {
    where: ContactUsWhereUniqueInput;
    create: ContactUsCreateInput;
    update: ContactUsUpdateInput;
  }) => ContactUsPromise;
  deleteContactUs: (where: ContactUsWhereUniqueInput) => ContactUsPromise;
  deleteManyContactUses: (where?: ContactUsWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createFaq: (data: FaqCreateInput) => FaqPromise;
  updateFaq: (args: {
    data: FaqUpdateInput;
    where: FaqWhereUniqueInput;
  }) => FaqPromise;
  updateManyFaqs: (args: {
    data: FaqUpdateManyMutationInput;
    where?: FaqWhereInput;
  }) => BatchPayloadPromise;
  upsertFaq: (args: {
    where: FaqWhereUniqueInput;
    create: FaqCreateInput;
    update: FaqUpdateInput;
  }) => FaqPromise;
  deleteFaq: (where: FaqWhereUniqueInput) => FaqPromise;
  deleteManyFaqs: (where?: FaqWhereInput) => BatchPayloadPromise;
  createHost: (data: HostCreateInput) => HostPromise;
  updateHost: (args: {
    data: HostUpdateInput;
    where: HostWhereUniqueInput;
  }) => HostPromise;
  updateManyHosts: (args: {
    data: HostUpdateManyMutationInput;
    where?: HostWhereInput;
  }) => BatchPayloadPromise;
  upsertHost: (args: {
    where: HostWhereUniqueInput;
    create: HostCreateInput;
    update: HostUpdateInput;
  }) => HostPromise;
  deleteHost: (where: HostWhereUniqueInput) => HostPromise;
  deleteManyHosts: (where?: HostWhereInput) => BatchPayloadPromise;
  createInfo: (data: InfoCreateInput) => InfoPromise;
  updateInfo: (args: {
    data: InfoUpdateInput;
    where: InfoWhereUniqueInput;
  }) => InfoPromise;
  updateManyInfoes: (args: {
    data: InfoUpdateManyMutationInput;
    where?: InfoWhereInput;
  }) => BatchPayloadPromise;
  upsertInfo: (args: {
    where: InfoWhereUniqueInput;
    create: InfoCreateInput;
    update: InfoUpdateInput;
  }) => InfoPromise;
  deleteInfo: (where: InfoWhereUniqueInput) => InfoPromise;
  deleteManyInfoes: (where?: InfoWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createSelfGuidedTour: (
    data: SelfGuidedTourCreateInput
  ) => SelfGuidedTourPromise;
  updateSelfGuidedTour: (args: {
    data: SelfGuidedTourUpdateInput;
    where: SelfGuidedTourWhereUniqueInput;
  }) => SelfGuidedTourPromise;
  updateManySelfGuidedTours: (args: {
    data: SelfGuidedTourUpdateManyMutationInput;
    where?: SelfGuidedTourWhereInput;
  }) => BatchPayloadPromise;
  upsertSelfGuidedTour: (args: {
    where: SelfGuidedTourWhereUniqueInput;
    create: SelfGuidedTourCreateInput;
    update: SelfGuidedTourUpdateInput;
  }) => SelfGuidedTourPromise;
  deleteSelfGuidedTour: (
    where: SelfGuidedTourWhereUniqueInput
  ) => SelfGuidedTourPromise;
  deleteManySelfGuidedTours: (
    where?: SelfGuidedTourWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  audio: (
    where?: AudioSubscriptionWhereInput
  ) => AudioSubscriptionPayloadSubscription;
  contactInfo: (
    where?: ContactInfoSubscriptionWhereInput
  ) => ContactInfoSubscriptionPayloadSubscription;
  contactUs: (
    where?: ContactUsSubscriptionWhereInput
  ) => ContactUsSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  faq: (
    where?: FaqSubscriptionWhereInput
  ) => FaqSubscriptionPayloadSubscription;
  host: (
    where?: HostSubscriptionWhereInput
  ) => HostSubscriptionPayloadSubscription;
  info: (
    where?: InfoSubscriptionWhereInput
  ) => InfoSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  selfGuidedTour: (
    where?: SelfGuidedTourSubscriptionWhereInput
  ) => SelfGuidedTourSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type HostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "bio_ASC"
  | "bio_DESC";

export type ContactInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "email_ASC"
  | "email_DESC";

export type FaqOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "question_ASC"
  | "question_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "location_ASC"
  | "location_DESC"
  | "image_ASC"
  | "image_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "date_ASC"
  | "date_DESC";

export type ContactUsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "twitterLink_ASC"
  | "twitterLink_DESC"
  | "instagramLink_ASC"
  | "instagramLink_DESC"
  | "facebookLink_ASC"
  | "facebookLink_DESC";

export type Difficulty = "EASY" | "MEDIUM" | "HARD";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userID_ASC"
  | "userID_DESC"
  | "score_ASC"
  | "score_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "date_ASC"
  | "date_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "date_ASC"
  | "date_DESC"
  | "startAt_ASC"
  | "startAt_DESC"
  | "endAt_ASC"
  | "endAt_DESC"
  | "category_ASC"
  | "category_DESC"
  | "price_ASC"
  | "price_DESC"
  | "locationTitle_ASC"
  | "locationTitle_DESC"
  | "address_ASC"
  | "address_DESC"
  | "image_ASC"
  | "image_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "language_ASC"
  | "language_DESC"
  | "details_ASC"
  | "details_DESC";

export type SelfGuidedTourOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "location_ASC"
  | "location_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "difficulty_ASC"
  | "difficulty_DESC"
  | "petFriendly_ASC"
  | "petFriendly_DESC"
  | "description_ASC"
  | "description_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type InfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "about_ASC"
  | "about_DESC";

export type AudioOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "url_ASC"
  | "url_DESC";

export interface ContactUsUpdateInput {
  contactInfo?: Maybe<ContactInfoUpdateOneRequiredInput>;
  twitterLink?: Maybe<String>;
  instagramLink?: Maybe<String>;
  facebookLink?: Maybe<String>;
}

export type AudioWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HostCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  image: String;
  bio: String;
}

export interface ContactInfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactInfoWhereInput[] | ContactInfoWhereInput>;
  OR?: Maybe<ContactInfoWhereInput[] | ContactInfoWhereInput>;
  NOT?: Maybe<ContactInfoWhereInput[] | ContactInfoWhereInput>;
}

export interface FaqScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<FaqScalarWhereInput[] | FaqScalarWhereInput>;
  OR?: Maybe<FaqScalarWhereInput[] | FaqScalarWhereInput>;
  NOT?: Maybe<FaqScalarWhereInput[] | FaqScalarWhereInput>;
}

export interface ReviewUpdateManyDataInput {
  userID?: Maybe<String>;
  score?: Maybe<Int>;
  comment?: Maybe<String>;
}

export type SelfGuidedTourWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewCreateManyInput {
  create?: Maybe<ReviewCreateInput[] | ReviewCreateInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface FaqUpsertWithWhereUniqueNestedInput {
  where: FaqWhereUniqueInput;
  update: FaqUpdateDataInput;
  create: FaqCreateInput;
}

export type ContactUsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SelfGuidedTourWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  difficulty_not?: Maybe<Difficulty>;
  difficulty_in?: Maybe<Difficulty[] | Difficulty>;
  difficulty_not_in?: Maybe<Difficulty[] | Difficulty>;
  petFriendly?: Maybe<Boolean>;
  petFriendly_not?: Maybe<Boolean>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  audio_every?: Maybe<AudioWhereInput>;
  audio_some?: Maybe<AudioWhereInput>;
  audio_none?: Maybe<AudioWhereInput>;
  AND?: Maybe<SelfGuidedTourWhereInput[] | SelfGuidedTourWhereInput>;
  OR?: Maybe<SelfGuidedTourWhereInput[] | SelfGuidedTourWhereInput>;
  NOT?: Maybe<SelfGuidedTourWhereInput[] | SelfGuidedTourWhereInput>;
}

export interface ContactUsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  contactInfo?: Maybe<ContactInfoWhereInput>;
  twitterLink?: Maybe<String>;
  twitterLink_not?: Maybe<String>;
  twitterLink_in?: Maybe<String[] | String>;
  twitterLink_not_in?: Maybe<String[] | String>;
  twitterLink_lt?: Maybe<String>;
  twitterLink_lte?: Maybe<String>;
  twitterLink_gt?: Maybe<String>;
  twitterLink_gte?: Maybe<String>;
  twitterLink_contains?: Maybe<String>;
  twitterLink_not_contains?: Maybe<String>;
  twitterLink_starts_with?: Maybe<String>;
  twitterLink_not_starts_with?: Maybe<String>;
  twitterLink_ends_with?: Maybe<String>;
  twitterLink_not_ends_with?: Maybe<String>;
  instagramLink?: Maybe<String>;
  instagramLink_not?: Maybe<String>;
  instagramLink_in?: Maybe<String[] | String>;
  instagramLink_not_in?: Maybe<String[] | String>;
  instagramLink_lt?: Maybe<String>;
  instagramLink_lte?: Maybe<String>;
  instagramLink_gt?: Maybe<String>;
  instagramLink_gte?: Maybe<String>;
  instagramLink_contains?: Maybe<String>;
  instagramLink_not_contains?: Maybe<String>;
  instagramLink_starts_with?: Maybe<String>;
  instagramLink_not_starts_with?: Maybe<String>;
  instagramLink_ends_with?: Maybe<String>;
  instagramLink_not_ends_with?: Maybe<String>;
  facebookLink?: Maybe<String>;
  facebookLink_not?: Maybe<String>;
  facebookLink_in?: Maybe<String[] | String>;
  facebookLink_not_in?: Maybe<String[] | String>;
  facebookLink_lt?: Maybe<String>;
  facebookLink_lte?: Maybe<String>;
  facebookLink_gt?: Maybe<String>;
  facebookLink_gte?: Maybe<String>;
  facebookLink_contains?: Maybe<String>;
  facebookLink_not_contains?: Maybe<String>;
  facebookLink_starts_with?: Maybe<String>;
  facebookLink_not_starts_with?: Maybe<String>;
  facebookLink_ends_with?: Maybe<String>;
  facebookLink_not_ends_with?: Maybe<String>;
  AND?: Maybe<ContactUsWhereInput[] | ContactUsWhereInput>;
  OR?: Maybe<ContactUsWhereInput[] | ContactUsWhereInput>;
  NOT?: Maybe<ContactUsWhereInput[] | ContactUsWhereInput>;
}

export interface AudioWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<AudioWhereInput[] | AudioWhereInput>;
  OR?: Maybe<AudioWhereInput[] | AudioWhereInput>;
  NOT?: Maybe<AudioWhereInput[] | AudioWhereInput>;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface FaqUpdateDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface HostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HostWhereInput>;
  AND?: Maybe<HostSubscriptionWhereInput[] | HostSubscriptionWhereInput>;
  OR?: Maybe<HostSubscriptionWhereInput[] | HostSubscriptionWhereInput>;
  NOT?: Maybe<HostSubscriptionWhereInput[] | HostSubscriptionWhereInput>;
}

export interface FaqUpdateWithWhereUniqueNestedInput {
  where: FaqWhereUniqueInput;
  data: FaqUpdateDataInput;
}

export interface FaqSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FaqWhereInput>;
  AND?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
  OR?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
  NOT?: Maybe<FaqSubscriptionWhereInput[] | FaqSubscriptionWhereInput>;
}

export interface FaqUpdateManyInput {
  create?: Maybe<FaqCreateInput[] | FaqCreateInput>;
  update?: Maybe<
    FaqUpdateWithWhereUniqueNestedInput[] | FaqUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    FaqUpsertWithWhereUniqueNestedInput[] | FaqUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<FaqWhereUniqueInput[] | FaqWhereUniqueInput>;
  connect?: Maybe<FaqWhereUniqueInput[] | FaqWhereUniqueInput>;
  set?: Maybe<FaqWhereUniqueInput[] | FaqWhereUniqueInput>;
  disconnect?: Maybe<FaqWhereUniqueInput[] | FaqWhereUniqueInput>;
  deleteMany?: Maybe<FaqScalarWhereInput[] | FaqScalarWhereInput>;
  updateMany?: Maybe<
    FaqUpdateManyWithWhereNestedInput[] | FaqUpdateManyWithWhereNestedInput
  >;
}

export interface ContactUsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactUsWhereInput>;
  AND?: Maybe<
    ContactUsSubscriptionWhereInput[] | ContactUsSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContactUsSubscriptionWhereInput[] | ContactUsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContactUsSubscriptionWhereInput[] | ContactUsSubscriptionWhereInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AudioSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AudioWhereInput>;
  AND?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
  OR?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
  NOT?: Maybe<AudioSubscriptionWhereInput[] | AudioSubscriptionWhereInput>;
}

export interface InfoUpdateInput {
  faq?: Maybe<FaqUpdateManyInput>;
  about?: Maybe<String>;
  contactUs?: Maybe<ContactUsUpdateOneRequiredInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  startAt?: Maybe<String>;
  startAt_not?: Maybe<String>;
  startAt_in?: Maybe<String[] | String>;
  startAt_not_in?: Maybe<String[] | String>;
  startAt_lt?: Maybe<String>;
  startAt_lte?: Maybe<String>;
  startAt_gt?: Maybe<String>;
  startAt_gte?: Maybe<String>;
  startAt_contains?: Maybe<String>;
  startAt_not_contains?: Maybe<String>;
  startAt_starts_with?: Maybe<String>;
  startAt_not_starts_with?: Maybe<String>;
  startAt_ends_with?: Maybe<String>;
  startAt_not_ends_with?: Maybe<String>;
  endAt?: Maybe<String>;
  endAt_not?: Maybe<String>;
  endAt_in?: Maybe<String[] | String>;
  endAt_not_in?: Maybe<String[] | String>;
  endAt_lt?: Maybe<String>;
  endAt_lte?: Maybe<String>;
  endAt_gt?: Maybe<String>;
  endAt_gte?: Maybe<String>;
  endAt_contains?: Maybe<String>;
  endAt_not_contains?: Maybe<String>;
  endAt_starts_with?: Maybe<String>;
  endAt_not_starts_with?: Maybe<String>;
  endAt_ends_with?: Maybe<String>;
  endAt_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  locationTitle?: Maybe<String>;
  locationTitle_not?: Maybe<String>;
  locationTitle_in?: Maybe<String[] | String>;
  locationTitle_not_in?: Maybe<String[] | String>;
  locationTitle_lt?: Maybe<String>;
  locationTitle_lte?: Maybe<String>;
  locationTitle_gt?: Maybe<String>;
  locationTitle_gte?: Maybe<String>;
  locationTitle_contains?: Maybe<String>;
  locationTitle_not_contains?: Maybe<String>;
  locationTitle_starts_with?: Maybe<String>;
  locationTitle_not_starts_with?: Maybe<String>;
  locationTitle_ends_with?: Maybe<String>;
  locationTitle_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  difficulty_not?: Maybe<Difficulty>;
  difficulty_in?: Maybe<Difficulty[] | Difficulty>;
  difficulty_not_in?: Maybe<Difficulty[] | Difficulty>;
  language?: Maybe<String>;
  language_not?: Maybe<String>;
  language_in?: Maybe<String[] | String>;
  language_not_in?: Maybe<String[] | String>;
  language_lt?: Maybe<String>;
  language_lte?: Maybe<String>;
  language_gt?: Maybe<String>;
  language_gte?: Maybe<String>;
  language_contains?: Maybe<String>;
  language_not_contains?: Maybe<String>;
  language_starts_with?: Maybe<String>;
  language_not_starts_with?: Maybe<String>;
  language_ends_with?: Maybe<String>;
  language_not_ends_with?: Maybe<String>;
  details?: Maybe<String>;
  details_not?: Maybe<String>;
  details_in?: Maybe<String[] | String>;
  details_not_in?: Maybe<String[] | String>;
  details_lt?: Maybe<String>;
  details_lte?: Maybe<String>;
  details_gt?: Maybe<String>;
  details_gte?: Maybe<String>;
  details_contains?: Maybe<String>;
  details_not_contains?: Maybe<String>;
  details_starts_with?: Maybe<String>;
  details_not_starts_with?: Maybe<String>;
  details_ends_with?: Maybe<String>;
  details_not_ends_with?: Maybe<String>;
  host?: Maybe<HostWhereInput>;
  reviews_every?: Maybe<ReviewWhereInput>;
  reviews_some?: Maybe<ReviewWhereInput>;
  reviews_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface ContactUsCreateOneInput {
  create?: Maybe<ContactUsCreateInput>;
  connect?: Maybe<ContactUsWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  location: String;
  image: String;
  bio: String;
}

export interface FaqCreateManyInput {
  create?: Maybe<FaqCreateInput[] | FaqCreateInput>;
  connect?: Maybe<FaqWhereUniqueInput[] | FaqWhereUniqueInput>;
}

export interface AudioUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  url?: Maybe<String>;
}

export interface InfoCreateInput {
  id?: Maybe<ID_Input>;
  faq?: Maybe<FaqCreateManyInput>;
  about: String;
  contactUs: ContactUsCreateOneInput;
}

export type FaqWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HostUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface FaqWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<FaqWhereInput[] | FaqWhereInput>;
  OR?: Maybe<FaqWhereInput[] | FaqWhereInput>;
  NOT?: Maybe<FaqWhereInput[] | FaqWhereInput>;
}

export interface AudioUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  url?: Maybe<String>;
}

export interface AudioUpdateManyInput {
  create?: Maybe<AudioCreateInput[] | AudioCreateInput>;
  update?: Maybe<
    | AudioUpdateWithWhereUniqueNestedInput[]
    | AudioUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AudioUpsertWithWhereUniqueNestedInput[]
    | AudioUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  set?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  disconnect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
  deleteMany?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  updateMany?: Maybe<
    AudioUpdateManyWithWhereNestedInput[] | AudioUpdateManyWithWhereNestedInput
  >;
}

export interface AudioCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  duration: String;
  latitude: String;
  longitude: String;
  url: String;
}

export interface SelfGuidedTourUpdateInput {
  title?: Maybe<String>;
  location?: Maybe<String>;
  duration?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  petFriendly?: Maybe<Boolean>;
  description?: Maybe<String>;
  audio?: Maybe<AudioUpdateManyInput>;
}

export interface AudioUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  url?: Maybe<String>;
}

export interface SelfGuidedTourCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  location: String;
  duration: String;
  difficulty: Difficulty;
  petFriendly?: Maybe<Boolean>;
  description: String;
  audio?: Maybe<AudioCreateManyInput>;
}

export interface AudioUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  url?: Maybe<String>;
}

export type InfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HostUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface InfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  faq_every?: Maybe<FaqWhereInput>;
  faq_some?: Maybe<FaqWhereInput>;
  faq_none?: Maybe<FaqWhereInput>;
  about?: Maybe<String>;
  about_not?: Maybe<String>;
  about_in?: Maybe<String[] | String>;
  about_not_in?: Maybe<String[] | String>;
  about_lt?: Maybe<String>;
  about_lte?: Maybe<String>;
  about_gt?: Maybe<String>;
  about_gte?: Maybe<String>;
  about_contains?: Maybe<String>;
  about_not_contains?: Maybe<String>;
  about_starts_with?: Maybe<String>;
  about_not_starts_with?: Maybe<String>;
  about_ends_with?: Maybe<String>;
  about_not_ends_with?: Maybe<String>;
  contactUs?: Maybe<ContactUsWhereInput>;
  AND?: Maybe<InfoWhereInput[] | InfoWhereInput>;
  OR?: Maybe<InfoWhereInput[] | InfoWhereInput>;
  NOT?: Maybe<InfoWhereInput[] | InfoWhereInput>;
}

export interface FaqUpdateManyMutationInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface ContactUsUpsertNestedInput {
  update: ContactUsUpdateDataInput;
  create: ContactUsCreateInput;
}

export interface ContactInfoCreateInput {
  id?: Maybe<ID_Input>;
  address: String;
  phoneNumber: String;
  email: String;
}

export interface ContactUsUpdateOneRequiredInput {
  create?: Maybe<ContactUsCreateInput>;
  update?: Maybe<ContactUsUpdateDataInput>;
  upsert?: Maybe<ContactUsUpsertNestedInput>;
  connect?: Maybe<ContactUsWhereUniqueInput>;
}

export interface ContactInfoUpdateInput {
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  email?: Maybe<String>;
}

export interface FaqUpdateManyDataInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface ContactInfoUpdateManyMutationInput {
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ContactUsCreateInput {
  id?: Maybe<ID_Input>;
  contactInfo: ContactInfoCreateOneInput;
  twitterLink?: Maybe<String>;
  instagramLink?: Maybe<String>;
  facebookLink?: Maybe<String>;
}

export type ContactInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ContactInfoCreateOneInput {
  create?: Maybe<ContactInfoCreateInput>;
  connect?: Maybe<ContactInfoWhereUniqueInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FaqUpdateInput {
  question?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface ContactInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactInfoWhereInput>;
  AND?: Maybe<
    ContactInfoSubscriptionWhereInput[] | ContactInfoSubscriptionWhereInput
  >;
  OR?: Maybe<
    ContactInfoSubscriptionWhereInput[] | ContactInfoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ContactInfoSubscriptionWhereInput[] | ContactInfoSubscriptionWhereInput
  >;
}

export interface ContactInfoUpdateOneRequiredInput {
  create?: Maybe<ContactInfoCreateInput>;
  update?: Maybe<ContactInfoUpdateDataInput>;
  upsert?: Maybe<ContactInfoUpsertNestedInput>;
  connect?: Maybe<ContactInfoWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  location?: Maybe<String>;
  image?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface ContactInfoUpdateDataInput {
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  email?: Maybe<String>;
}

export interface SelfGuidedTourUpdateManyMutationInput {
  title?: Maybe<String>;
  location?: Maybe<String>;
  duration?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  petFriendly?: Maybe<Boolean>;
  description?: Maybe<String>;
}

export interface ContactInfoUpsertNestedInput {
  update: ContactInfoUpdateDataInput;
  create: ContactInfoCreateInput;
}

export interface AudioScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  OR?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
  NOT?: Maybe<AudioScalarWhereInput[] | AudioScalarWhereInput>;
}

export interface ContactUsUpdateManyMutationInput {
  twitterLink?: Maybe<String>;
  instagramLink?: Maybe<String>;
  facebookLink?: Maybe<String>;
}

export interface AudioUpdateWithWhereUniqueNestedInput {
  where: AudioWhereUniqueInput;
  data: AudioUpdateDataInput;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  date: DateTimeInput;
  startAt: String;
  endAt: String;
  category: String;
  price: Float;
  locationTitle: String;
  address: String;
  image: String;
  difficulty: Difficulty;
  language: String;
  details: String;
  host: HostCreateOneInput;
  reviews?: Maybe<ReviewCreateManyInput>;
}

export interface AudioCreateManyInput {
  create?: Maybe<AudioCreateInput[] | AudioCreateInput>;
  connect?: Maybe<AudioWhereUniqueInput[] | AudioWhereUniqueInput>;
}

export interface HostCreateOneInput {
  create?: Maybe<HostCreateInput>;
  connect?: Maybe<HostWhereUniqueInput>;
}

export interface ReviewUpdateInput {
  userID?: Maybe<String>;
  score?: Maybe<Int>;
  comment?: Maybe<String>;
}

export interface FaqCreateInput {
  id?: Maybe<ID_Input>;
  question: String;
  answer: String;
}

export interface ContactUsUpdateDataInput {
  contactInfo?: Maybe<ContactInfoUpdateOneRequiredInput>;
  twitterLink?: Maybe<String>;
  instagramLink?: Maybe<String>;
  facebookLink?: Maybe<String>;
}

export interface EventUpdateManyMutationInput {
  title?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  startAt?: Maybe<String>;
  endAt?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Float>;
  locationTitle?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  language?: Maybe<String>;
  details?: Maybe<String>;
}

export interface FaqUpdateManyWithWhereNestedInput {
  where: FaqScalarWhereInput;
  data: FaqUpdateManyDataInput;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  userID: String;
  score: Int;
  comment: String;
}

export interface InfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InfoWhereInput>;
  AND?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
  OR?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
  NOT?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
}

export interface EventUpdateInput {
  title?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  startAt?: Maybe<String>;
  endAt?: Maybe<String>;
  category?: Maybe<String>;
  price?: Maybe<Float>;
  locationTitle?: Maybe<String>;
  address?: Maybe<String>;
  image?: Maybe<String>;
  difficulty?: Maybe<Difficulty>;
  language?: Maybe<String>;
  details?: Maybe<String>;
  host?: Maybe<HostUpdateOneRequiredInput>;
  reviews?: Maybe<ReviewUpdateManyInput>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userID?: Maybe<String>;
  userID_not?: Maybe<String>;
  userID_in?: Maybe<String[] | String>;
  userID_not_in?: Maybe<String[] | String>;
  userID_lt?: Maybe<String>;
  userID_lte?: Maybe<String>;
  userID_gt?: Maybe<String>;
  userID_gte?: Maybe<String>;
  userID_contains?: Maybe<String>;
  userID_not_contains?: Maybe<String>;
  userID_starts_with?: Maybe<String>;
  userID_not_starts_with?: Maybe<String>;
  userID_ends_with?: Maybe<String>;
  userID_not_ends_with?: Maybe<String>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface HostUpdateOneRequiredInput {
  create?: Maybe<HostCreateInput>;
  update?: Maybe<HostUpdateDataInput>;
  upsert?: Maybe<HostUpsertNestedInput>;
  connect?: Maybe<HostWhereUniqueInput>;
}

export interface AudioUpdateManyWithWhereNestedInput {
  where: AudioScalarWhereInput;
  data: AudioUpdateManyDataInput;
}

export interface HostUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  bio?: Maybe<String>;
}

export type HostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface HostUpsertNestedInput {
  update: HostUpdateDataInput;
  create: HostCreateInput;
}

export interface InfoUpdateManyMutationInput {
  about?: Maybe<String>;
}

export interface ReviewUpdateManyInput {
  create?: Maybe<ReviewCreateInput[] | ReviewCreateInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueNestedInput[]
    | ReviewUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueNestedInput[]
    | ReviewUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface SelfGuidedTourSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SelfGuidedTourWhereInput>;
  AND?: Maybe<
    | SelfGuidedTourSubscriptionWhereInput[]
    | SelfGuidedTourSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SelfGuidedTourSubscriptionWhereInput[]
    | SelfGuidedTourSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SelfGuidedTourSubscriptionWhereInput[]
    | SelfGuidedTourSubscriptionWhereInput
  >;
}

export interface ReviewUpdateWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateDataInput;
}

export interface HostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  AND?: Maybe<HostWhereInput[] | HostWhereInput>;
  OR?: Maybe<HostWhereInput[] | HostWhereInput>;
  NOT?: Maybe<HostWhereInput[] | HostWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userID?: Maybe<String>;
  userID_not?: Maybe<String>;
  userID_in?: Maybe<String[] | String>;
  userID_not_in?: Maybe<String[] | String>;
  userID_lt?: Maybe<String>;
  userID_lte?: Maybe<String>;
  userID_gt?: Maybe<String>;
  userID_gte?: Maybe<String>;
  userID_contains?: Maybe<String>;
  userID_not_contains?: Maybe<String>;
  userID_starts_with?: Maybe<String>;
  userID_not_starts_with?: Maybe<String>;
  userID_ends_with?: Maybe<String>;
  userID_not_ends_with?: Maybe<String>;
  score?: Maybe<Int>;
  score_not?: Maybe<Int>;
  score_in?: Maybe<Int[] | Int>;
  score_not_in?: Maybe<Int[] | Int>;
  score_lt?: Maybe<Int>;
  score_lte?: Maybe<Int>;
  score_gt?: Maybe<Int>;
  score_gte?: Maybe<Int>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpsertWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateDataInput;
  create: ReviewCreateInput;
}

export interface ReviewUpdateDataInput {
  userID?: Maybe<String>;
  score?: Maybe<Int>;
  comment?: Maybe<String>;
}

export interface AudioUpsertWithWhereUniqueNestedInput {
  where: AudioWhereUniqueInput;
  update: AudioUpdateDataInput;
  create: AudioCreateInput;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewUpdateManyMutationInput {
  userID?: Maybe<String>;
  score?: Maybe<Int>;
  comment?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  location: String;
  image: String;
  bio: String;
  date: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ContactInfoConnection {
  pageInfo: PageInfo;
  edges: ContactInfoEdge[];
}

export interface ContactInfoConnectionPromise
  extends Promise<ContactInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactInfoEdge>>() => T;
  aggregate: <T = AggregateContactInfoPromise>() => T;
}

export interface ContactInfoConnectionSubscription
  extends Promise<AsyncIterator<ContactInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactInfoSubscription>() => T;
}

export interface ContactInfoEdge {
  node: ContactInfo;
  cursor: String;
}

export interface ContactInfoEdgePromise
  extends Promise<ContactInfoEdge>,
    Fragmentable {
  node: <T = ContactInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactInfoEdgeSubscription
  extends Promise<AsyncIterator<ContactInfoEdge>>,
    Fragmentable {
  node: <T = ContactInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  userID: String;
  score: Int;
  comment: String;
  date: DateTimeOutput;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userID: () => Promise<String>;
  score: () => Promise<Int>;
  comment: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userID: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface Review {
  id: ID_Output;
  userID: String;
  score: Int;
  comment: String;
  date: DateTimeOutput;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  userID: () => Promise<String>;
  score: () => Promise<Int>;
  comment: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userID: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
  comment: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userID: () => Promise<String>;
  score: () => Promise<Int>;
  comment: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface ContactInfo {
  id: ID_Output;
  address: String;
  phoneNumber: String;
  email: String;
}

export interface ContactInfoPromise extends Promise<ContactInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ContactInfoSubscription
  extends Promise<AsyncIterator<ContactInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ContactInfoNullablePromise
  extends Promise<ContactInfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  email: () => Promise<String>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SelfGuidedTourPreviousValues {
  id: ID_Output;
  title: String;
  location: String;
  duration: String;
  difficulty: Difficulty;
  petFriendly: Boolean;
  description: String;
}

export interface SelfGuidedTourPreviousValuesPromise
  extends Promise<SelfGuidedTourPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  location: () => Promise<String>;
  duration: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  petFriendly: () => Promise<Boolean>;
  description: () => Promise<String>;
}

export interface SelfGuidedTourPreviousValuesSubscription
  extends Promise<AsyncIterator<SelfGuidedTourPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  petFriendly: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AudioEdge {
  node: Audio;
  cursor: String;
}

export interface AudioEdgePromise extends Promise<AudioEdge>, Fragmentable {
  node: <T = AudioPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AudioEdgeSubscription
  extends Promise<AsyncIterator<AudioEdge>>,
    Fragmentable {
  node: <T = AudioSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  firstName: String;
  lastName: String;
  location: String;
  image: String;
  bio: String;
  date: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  location: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface Host {
  id: ID_Output;
  email: String;
  name: String;
  image: String;
  bio: String;
}

export interface HostPromise extends Promise<Host>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
}

export interface HostSubscription
  extends Promise<AsyncIterator<Host>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
}

export interface HostNullablePromise
  extends Promise<Host | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
}

export interface SelfGuidedTourEdge {
  node: SelfGuidedTour;
  cursor: String;
}

export interface SelfGuidedTourEdgePromise
  extends Promise<SelfGuidedTourEdge>,
    Fragmentable {
  node: <T = SelfGuidedTourPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SelfGuidedTourEdgeSubscription
  extends Promise<AsyncIterator<SelfGuidedTourEdge>>,
    Fragmentable {
  node: <T = SelfGuidedTourSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Audio {
  id: ID_Output;
  title: String;
  description: String;
  duration: String;
  latitude: String;
  longitude: String;
  url: String;
}

export interface AudioPromise extends Promise<Audio>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AudioSubscription
  extends Promise<AsyncIterator<Audio>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AudioNullablePromise
  extends Promise<Audio | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  url: () => Promise<String>;
}

export interface SelfGuidedTour {
  id: ID_Output;
  title: String;
  location: String;
  duration: String;
  difficulty: Difficulty;
  petFriendly: Boolean;
  description: String;
}

export interface SelfGuidedTourPromise
  extends Promise<SelfGuidedTour>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  location: () => Promise<String>;
  duration: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  petFriendly: () => Promise<Boolean>;
  description: () => Promise<String>;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SelfGuidedTourSubscription
  extends Promise<AsyncIterator<SelfGuidedTour>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  petFriendly: () => Promise<AsyncIterator<Boolean>>;
  description: () => Promise<AsyncIterator<String>>;
  audio: <T = Promise<AsyncIterator<AudioSubscription>>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SelfGuidedTourNullablePromise
  extends Promise<SelfGuidedTour | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  location: () => Promise<String>;
  duration: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  petFriendly: () => Promise<Boolean>;
  description: () => Promise<String>;
  audio: <T = FragmentableArray<Audio>>(args?: {
    where?: AudioWhereInput;
    orderBy?: AudioOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AudioSubscriptionPayload {
  mutation: MutationType;
  node: Audio;
  updatedFields: String[];
  previousValues: AudioPreviousValues;
}

export interface AudioSubscriptionPayloadPromise
  extends Promise<AudioSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AudioPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AudioPreviousValuesPromise>() => T;
}

export interface AudioSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AudioSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AudioSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AudioPreviousValuesSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AudioPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  duration: String;
  latitude: String;
  longitude: String;
  url: String;
}

export interface AudioPreviousValuesPromise
  extends Promise<AudioPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AudioPreviousValuesSubscription
  extends Promise<AsyncIterator<AudioPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInfo {
  count: Int;
}

export interface AggregateInfoPromise
  extends Promise<AggregateInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInfoSubscription
  extends Promise<AsyncIterator<AggregateInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAudio {
  count: Int;
}

export interface AggregateAudioPromise
  extends Promise<AggregateAudio>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAudioSubscription
  extends Promise<AsyncIterator<AggregateAudio>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InfoConnection {
  pageInfo: PageInfo;
  edges: InfoEdge[];
}

export interface InfoConnectionPromise
  extends Promise<InfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InfoEdge>>() => T;
  aggregate: <T = AggregateInfoPromise>() => T;
}

export interface InfoConnectionSubscription
  extends Promise<AsyncIterator<InfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInfoSubscription>() => T;
}

export interface ContactInfoSubscriptionPayload {
  mutation: MutationType;
  node: ContactInfo;
  updatedFields: String[];
  previousValues: ContactInfoPreviousValues;
}

export interface ContactInfoSubscriptionPayloadPromise
  extends Promise<ContactInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactInfoPreviousValuesPromise>() => T;
}

export interface ContactInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactInfoPreviousValuesSubscription>() => T;
}

export interface Info {
  id: ID_Output;
  about: String;
}

export interface InfoPromise extends Promise<Info>, Fragmentable {
  id: () => Promise<ID_Output>;
  faq: <T = FragmentableArray<Faq>>(args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  about: () => Promise<String>;
  contactUs: <T = ContactUsPromise>() => T;
}

export interface InfoSubscription
  extends Promise<AsyncIterator<Info>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  faq: <T = Promise<AsyncIterator<FaqSubscription>>>(args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  about: () => Promise<AsyncIterator<String>>;
  contactUs: <T = ContactUsSubscription>() => T;
}

export interface InfoNullablePromise
  extends Promise<Info | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  faq: <T = FragmentableArray<Faq>>(args?: {
    where?: FaqWhereInput;
    orderBy?: FaqOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  about: () => Promise<String>;
  contactUs: <T = ContactUsPromise>() => T;
}

export interface ContactInfoPreviousValues {
  id: ID_Output;
  address: String;
  phoneNumber: String;
  email: String;
}

export interface ContactInfoPreviousValuesPromise
  extends Promise<ContactInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  email: () => Promise<String>;
}

export interface ContactInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface HostEdge {
  node: Host;
  cursor: String;
}

export interface HostEdgePromise extends Promise<HostEdge>, Fragmentable {
  node: <T = HostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HostEdgeSubscription
  extends Promise<AsyncIterator<HostEdge>>,
    Fragmentable {
  node: <T = HostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SelfGuidedTourSubscriptionPayload {
  mutation: MutationType;
  node: SelfGuidedTour;
  updatedFields: String[];
  previousValues: SelfGuidedTourPreviousValues;
}

export interface SelfGuidedTourSubscriptionPayloadPromise
  extends Promise<SelfGuidedTourSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SelfGuidedTourPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SelfGuidedTourPreviousValuesPromise>() => T;
}

export interface SelfGuidedTourSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SelfGuidedTourSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SelfGuidedTourSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SelfGuidedTourPreviousValuesSubscription>() => T;
}

export interface AudioConnection {
  pageInfo: PageInfo;
  edges: AudioEdge[];
}

export interface AudioConnectionPromise
  extends Promise<AudioConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AudioEdge>>() => T;
  aggregate: <T = AggregateAudioPromise>() => T;
}

export interface AudioConnectionSubscription
  extends Promise<AsyncIterator<AudioConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AudioEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAudioSubscription>() => T;
}

export interface ContactUsSubscriptionPayload {
  mutation: MutationType;
  node: ContactUs;
  updatedFields: String[];
  previousValues: ContactUsPreviousValues;
}

export interface ContactUsSubscriptionPayloadPromise
  extends Promise<ContactUsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactUsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactUsPreviousValuesPromise>() => T;
}

export interface ContactUsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactUsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactUsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactUsPreviousValuesSubscription>() => T;
}

export interface FaqEdge {
  node: Faq;
  cursor: String;
}

export interface FaqEdgePromise extends Promise<FaqEdge>, Fragmentable {
  node: <T = FaqPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FaqEdgeSubscription
  extends Promise<AsyncIterator<FaqEdge>>,
    Fragmentable {
  node: <T = FaqSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactUsPreviousValues {
  id: ID_Output;
  twitterLink?: String;
  instagramLink?: String;
  facebookLink?: String;
}

export interface ContactUsPreviousValuesPromise
  extends Promise<ContactUsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  twitterLink: () => Promise<String>;
  instagramLink: () => Promise<String>;
  facebookLink: () => Promise<String>;
}

export interface ContactUsPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactUsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  twitterLink: () => Promise<AsyncIterator<String>>;
  instagramLink: () => Promise<AsyncIterator<String>>;
  facebookLink: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactUs {
  id: ID_Output;
  twitterLink?: String;
  instagramLink?: String;
  facebookLink?: String;
}

export interface ContactUsPromise extends Promise<ContactUs>, Fragmentable {
  id: () => Promise<ID_Output>;
  contactInfo: <T = ContactInfoPromise>() => T;
  twitterLink: () => Promise<String>;
  instagramLink: () => Promise<String>;
  facebookLink: () => Promise<String>;
}

export interface ContactUsSubscription
  extends Promise<AsyncIterator<ContactUs>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  contactInfo: <T = ContactInfoSubscription>() => T;
  twitterLink: () => Promise<AsyncIterator<String>>;
  instagramLink: () => Promise<AsyncIterator<String>>;
  facebookLink: () => Promise<AsyncIterator<String>>;
}

export interface ContactUsNullablePromise
  extends Promise<ContactUs | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  contactInfo: <T = ContactInfoPromise>() => T;
  twitterLink: () => Promise<String>;
  instagramLink: () => Promise<String>;
  facebookLink: () => Promise<String>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  title: String;
  date: DateTimeOutput;
  startAt: String;
  endAt: String;
  category: String;
  price: Float;
  locationTitle: String;
  address: String;
  image: String;
  difficulty: Difficulty;
  language: String;
  details: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  startAt: () => Promise<String>;
  endAt: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Float>;
  locationTitle: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  language: () => Promise<String>;
  details: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  startAt: () => Promise<AsyncIterator<String>>;
  endAt: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  locationTitle: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  language: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSelfGuidedTour {
  count: Int;
}

export interface AggregateSelfGuidedTourPromise
  extends Promise<AggregateSelfGuidedTour>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSelfGuidedTourSubscription
  extends Promise<AsyncIterator<AggregateSelfGuidedTour>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  title: String;
  date: DateTimeOutput;
  startAt: String;
  endAt: String;
  category: String;
  price: Float;
  locationTitle: String;
  address: String;
  image: String;
  difficulty: Difficulty;
  language: String;
  details: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  startAt: () => Promise<String>;
  endAt: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Float>;
  locationTitle: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  language: () => Promise<String>;
  details: () => Promise<String>;
  host: <T = HostPromise>() => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  startAt: () => Promise<AsyncIterator<String>>;
  endAt: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
  locationTitle: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  difficulty: () => Promise<AsyncIterator<Difficulty>>;
  language: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  host: <T = HostSubscription>() => T;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  startAt: () => Promise<String>;
  endAt: () => Promise<String>;
  category: () => Promise<String>;
  price: () => Promise<Float>;
  locationTitle: () => Promise<String>;
  address: () => Promise<String>;
  image: () => Promise<String>;
  difficulty: () => Promise<Difficulty>;
  language: () => Promise<String>;
  details: () => Promise<String>;
  host: <T = HostPromise>() => T;
  reviews: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FaqSubscriptionPayload {
  mutation: MutationType;
  node: Faq;
  updatedFields: String[];
  previousValues: FaqPreviousValues;
}

export interface FaqSubscriptionPayloadPromise
  extends Promise<FaqSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FaqPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FaqPreviousValuesPromise>() => T;
}

export interface FaqSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FaqSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FaqSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FaqPreviousValuesSubscription>() => T;
}

export interface InfoEdge {
  node: Info;
  cursor: String;
}

export interface InfoEdgePromise extends Promise<InfoEdge>, Fragmentable {
  node: <T = InfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InfoEdgeSubscription
  extends Promise<AsyncIterator<InfoEdge>>,
    Fragmentable {
  node: <T = InfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FaqPreviousValues {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface FaqPreviousValuesPromise
  extends Promise<FaqPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface FaqPreviousValuesSubscription
  extends Promise<AsyncIterator<FaqPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHost {
  count: Int;
}

export interface AggregateHostPromise
  extends Promise<AggregateHost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHostSubscription
  extends Promise<AsyncIterator<AggregateHost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateContactUs {
  count: Int;
}

export interface AggregateContactUsPromise
  extends Promise<AggregateContactUs>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactUsSubscription
  extends Promise<AsyncIterator<AggregateContactUs>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateFaq {
  count: Int;
}

export interface AggregateFaqPromise
  extends Promise<AggregateFaq>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFaqSubscription
  extends Promise<AsyncIterator<AggregateFaq>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HostSubscriptionPayload {
  mutation: MutationType;
  node: Host;
  updatedFields: String[];
  previousValues: HostPreviousValues;
}

export interface HostSubscriptionPayloadPromise
  extends Promise<HostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HostPreviousValuesPromise>() => T;
}

export interface HostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HostPreviousValuesSubscription>() => T;
}

export interface Faq {
  id: ID_Output;
  question: String;
  answer: String;
}

export interface FaqPromise extends Promise<Faq>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface FaqSubscription
  extends Promise<AsyncIterator<Faq>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  question: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface FaqNullablePromise extends Promise<Faq | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  question: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface HostPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  image: String;
  bio: String;
}

export interface HostPreviousValuesPromise
  extends Promise<HostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  bio: () => Promise<String>;
}

export interface HostPreviousValuesSubscription
  extends Promise<AsyncIterator<HostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ContactUsEdge {
  node: ContactUs;
  cursor: String;
}

export interface ContactUsEdgePromise
  extends Promise<ContactUsEdge>,
    Fragmentable {
  node: <T = ContactUsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactUsEdgeSubscription
  extends Promise<AsyncIterator<ContactUsEdge>>,
    Fragmentable {
  node: <T = ContactUsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface HostConnection {
  pageInfo: PageInfo;
  edges: HostEdge[];
}

export interface HostConnectionPromise
  extends Promise<HostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HostEdge>>() => T;
  aggregate: <T = AggregateHostPromise>() => T;
}

export interface HostConnectionSubscription
  extends Promise<AsyncIterator<HostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHostSubscription>() => T;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ContactUsConnection {
  pageInfo: PageInfo;
  edges: ContactUsEdge[];
}

export interface ContactUsConnectionPromise
  extends Promise<ContactUsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactUsEdge>>() => T;
  aggregate: <T = AggregateContactUsPromise>() => T;
}

export interface ContactUsConnectionSubscription
  extends Promise<AsyncIterator<ContactUsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactUsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactUsSubscription>() => T;
}

export interface InfoPreviousValues {
  id: ID_Output;
  about: String;
}

export interface InfoPreviousValuesPromise
  extends Promise<InfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  about: () => Promise<String>;
}

export interface InfoPreviousValuesSubscription
  extends Promise<AsyncIterator<InfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  about: () => Promise<AsyncIterator<String>>;
}

export interface InfoSubscriptionPayload {
  mutation: MutationType;
  node: Info;
  updatedFields: String[];
  previousValues: InfoPreviousValues;
}

export interface InfoSubscriptionPayloadPromise
  extends Promise<InfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InfoPreviousValuesPromise>() => T;
}

export interface InfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InfoPreviousValuesSubscription>() => T;
}

export interface FaqConnection {
  pageInfo: PageInfo;
  edges: FaqEdge[];
}

export interface FaqConnectionPromise
  extends Promise<FaqConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FaqEdge>>() => T;
  aggregate: <T = AggregateFaqPromise>() => T;
}

export interface FaqConnectionSubscription
  extends Promise<AsyncIterator<FaqConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FaqEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFaqSubscription>() => T;
}

export interface AggregateContactInfo {
  count: Int;
}

export interface AggregateContactInfoPromise
  extends Promise<AggregateContactInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactInfoSubscription
  extends Promise<AsyncIterator<AggregateContactInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SelfGuidedTourConnection {
  pageInfo: PageInfo;
  edges: SelfGuidedTourEdge[];
}

export interface SelfGuidedTourConnectionPromise
  extends Promise<SelfGuidedTourConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SelfGuidedTourEdge>>() => T;
  aggregate: <T = AggregateSelfGuidedTourPromise>() => T;
}

export interface SelfGuidedTourConnectionSubscription
  extends Promise<AsyncIterator<SelfGuidedTourConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SelfGuidedTourEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSelfGuidedTourSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Difficulty",
    embedded: false
  },
  {
    name: "Host",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Audio",
    embedded: false
  },
  {
    name: "SelfGuidedTour",
    embedded: false
  },
  {
    name: "Faq",
    embedded: false
  },
  {
    name: "ContactInfo",
    embedded: false
  },
  {
    name: "ContactUs",
    embedded: false
  },
  {
    name: "Info",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
