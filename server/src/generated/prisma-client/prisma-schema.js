module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAudio {
  count: Int!
}

type AggregateContactInfo {
  count: Int!
}

type AggregateContactUs {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFaq {
  count: Int!
}

type AggregateHost {
  count: Int!
}

type AggregateInfo {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateSelfGuidedTour {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Audio {
  id: ID!
  title: String!
  description: String!
  duration: String!
  latitude: String!
  longitude: String!
  url: String!
}

type AudioConnection {
  pageInfo: PageInfo!
  edges: [AudioEdge]!
  aggregate: AggregateAudio!
}

input AudioCreateInput {
  id: ID
  title: String!
  description: String!
  duration: String!
  latitude: String!
  longitude: String!
  url: String!
}

input AudioCreateManyInput {
  create: [AudioCreateInput!]
  connect: [AudioWhereUniqueInput!]
}

type AudioEdge {
  node: Audio!
  cursor: String!
}

enum AudioOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  duration_ASC
  duration_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  url_ASC
  url_DESC
}

type AudioPreviousValues {
  id: ID!
  title: String!
  description: String!
  duration: String!
  latitude: String!
  longitude: String!
  url: String!
}

input AudioScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  duration: String
  duration_not: String
  duration_in: [String!]
  duration_not_in: [String!]
  duration_lt: String
  duration_lte: String
  duration_gt: String
  duration_gte: String
  duration_contains: String
  duration_not_contains: String
  duration_starts_with: String
  duration_not_starts_with: String
  duration_ends_with: String
  duration_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AudioScalarWhereInput!]
  OR: [AudioScalarWhereInput!]
  NOT: [AudioScalarWhereInput!]
}

type AudioSubscriptionPayload {
  mutation: MutationType!
  node: Audio
  updatedFields: [String!]
  previousValues: AudioPreviousValues
}

input AudioSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AudioWhereInput
  AND: [AudioSubscriptionWhereInput!]
  OR: [AudioSubscriptionWhereInput!]
  NOT: [AudioSubscriptionWhereInput!]
}

input AudioUpdateDataInput {
  title: String
  description: String
  duration: String
  latitude: String
  longitude: String
  url: String
}

input AudioUpdateInput {
  title: String
  description: String
  duration: String
  latitude: String
  longitude: String
  url: String
}

input AudioUpdateManyDataInput {
  title: String
  description: String
  duration: String
  latitude: String
  longitude: String
  url: String
}

input AudioUpdateManyInput {
  create: [AudioCreateInput!]
  update: [AudioUpdateWithWhereUniqueNestedInput!]
  upsert: [AudioUpsertWithWhereUniqueNestedInput!]
  delete: [AudioWhereUniqueInput!]
  connect: [AudioWhereUniqueInput!]
  set: [AudioWhereUniqueInput!]
  disconnect: [AudioWhereUniqueInput!]
  deleteMany: [AudioScalarWhereInput!]
  updateMany: [AudioUpdateManyWithWhereNestedInput!]
}

input AudioUpdateManyMutationInput {
  title: String
  description: String
  duration: String
  latitude: String
  longitude: String
  url: String
}

input AudioUpdateManyWithWhereNestedInput {
  where: AudioScalarWhereInput!
  data: AudioUpdateManyDataInput!
}

input AudioUpdateWithWhereUniqueNestedInput {
  where: AudioWhereUniqueInput!
  data: AudioUpdateDataInput!
}

input AudioUpsertWithWhereUniqueNestedInput {
  where: AudioWhereUniqueInput!
  update: AudioUpdateDataInput!
  create: AudioCreateInput!
}

input AudioWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  duration: String
  duration_not: String
  duration_in: [String!]
  duration_not_in: [String!]
  duration_lt: String
  duration_lte: String
  duration_gt: String
  duration_gte: String
  duration_contains: String
  duration_not_contains: String
  duration_starts_with: String
  duration_not_starts_with: String
  duration_ends_with: String
  duration_not_ends_with: String
  latitude: String
  latitude_not: String
  latitude_in: [String!]
  latitude_not_in: [String!]
  latitude_lt: String
  latitude_lte: String
  latitude_gt: String
  latitude_gte: String
  latitude_contains: String
  latitude_not_contains: String
  latitude_starts_with: String
  latitude_not_starts_with: String
  latitude_ends_with: String
  latitude_not_ends_with: String
  longitude: String
  longitude_not: String
  longitude_in: [String!]
  longitude_not_in: [String!]
  longitude_lt: String
  longitude_lte: String
  longitude_gt: String
  longitude_gte: String
  longitude_contains: String
  longitude_not_contains: String
  longitude_starts_with: String
  longitude_not_starts_with: String
  longitude_ends_with: String
  longitude_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AudioWhereInput!]
  OR: [AudioWhereInput!]
  NOT: [AudioWhereInput!]
}

input AudioWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type ContactInfo {
  id: ID!
  address: String!
  phoneNumber: String!
  email: String!
}

type ContactInfoConnection {
  pageInfo: PageInfo!
  edges: [ContactInfoEdge]!
  aggregate: AggregateContactInfo!
}

input ContactInfoCreateInput {
  id: ID
  address: String!
  phoneNumber: String!
  email: String!
}

input ContactInfoCreateOneInput {
  create: ContactInfoCreateInput
  connect: ContactInfoWhereUniqueInput
}

type ContactInfoEdge {
  node: ContactInfo!
  cursor: String!
}

enum ContactInfoOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  email_ASC
  email_DESC
}

type ContactInfoPreviousValues {
  id: ID!
  address: String!
  phoneNumber: String!
  email: String!
}

type ContactInfoSubscriptionPayload {
  mutation: MutationType!
  node: ContactInfo
  updatedFields: [String!]
  previousValues: ContactInfoPreviousValues
}

input ContactInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactInfoWhereInput
  AND: [ContactInfoSubscriptionWhereInput!]
  OR: [ContactInfoSubscriptionWhereInput!]
  NOT: [ContactInfoSubscriptionWhereInput!]
}

input ContactInfoUpdateDataInput {
  address: String
  phoneNumber: String
  email: String
}

input ContactInfoUpdateInput {
  address: String
  phoneNumber: String
  email: String
}

input ContactInfoUpdateManyMutationInput {
  address: String
  phoneNumber: String
  email: String
}

input ContactInfoUpdateOneRequiredInput {
  create: ContactInfoCreateInput
  update: ContactInfoUpdateDataInput
  upsert: ContactInfoUpsertNestedInput
  connect: ContactInfoWhereUniqueInput
}

input ContactInfoUpsertNestedInput {
  update: ContactInfoUpdateDataInput!
  create: ContactInfoCreateInput!
}

input ContactInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
}

input ContactInfoWhereUniqueInput {
  id: ID
}

type ContactUs {
  id: ID!
  contactInfo: ContactInfo!
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

type ContactUsConnection {
  pageInfo: PageInfo!
  edges: [ContactUsEdge]!
  aggregate: AggregateContactUs!
}

input ContactUsCreateInput {
  id: ID
  contactInfo: ContactInfoCreateOneInput!
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

input ContactUsCreateOneInput {
  create: ContactUsCreateInput
  connect: ContactUsWhereUniqueInput
}

type ContactUsEdge {
  node: ContactUs!
  cursor: String!
}

enum ContactUsOrderByInput {
  id_ASC
  id_DESC
  twitterLink_ASC
  twitterLink_DESC
  instagramLink_ASC
  instagramLink_DESC
  facebookLink_ASC
  facebookLink_DESC
}

type ContactUsPreviousValues {
  id: ID!
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

type ContactUsSubscriptionPayload {
  mutation: MutationType!
  node: ContactUs
  updatedFields: [String!]
  previousValues: ContactUsPreviousValues
}

input ContactUsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactUsWhereInput
  AND: [ContactUsSubscriptionWhereInput!]
  OR: [ContactUsSubscriptionWhereInput!]
  NOT: [ContactUsSubscriptionWhereInput!]
}

input ContactUsUpdateDataInput {
  contactInfo: ContactInfoUpdateOneRequiredInput
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

input ContactUsUpdateInput {
  contactInfo: ContactInfoUpdateOneRequiredInput
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

input ContactUsUpdateManyMutationInput {
  twitterLink: String
  instagramLink: String
  facebookLink: String
}

input ContactUsUpdateOneRequiredInput {
  create: ContactUsCreateInput
  update: ContactUsUpdateDataInput
  upsert: ContactUsUpsertNestedInput
  connect: ContactUsWhereUniqueInput
}

input ContactUsUpsertNestedInput {
  update: ContactUsUpdateDataInput!
  create: ContactUsCreateInput!
}

input ContactUsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  contactInfo: ContactInfoWhereInput
  twitterLink: String
  twitterLink_not: String
  twitterLink_in: [String!]
  twitterLink_not_in: [String!]
  twitterLink_lt: String
  twitterLink_lte: String
  twitterLink_gt: String
  twitterLink_gte: String
  twitterLink_contains: String
  twitterLink_not_contains: String
  twitterLink_starts_with: String
  twitterLink_not_starts_with: String
  twitterLink_ends_with: String
  twitterLink_not_ends_with: String
  instagramLink: String
  instagramLink_not: String
  instagramLink_in: [String!]
  instagramLink_not_in: [String!]
  instagramLink_lt: String
  instagramLink_lte: String
  instagramLink_gt: String
  instagramLink_gte: String
  instagramLink_contains: String
  instagramLink_not_contains: String
  instagramLink_starts_with: String
  instagramLink_not_starts_with: String
  instagramLink_ends_with: String
  instagramLink_not_ends_with: String
  facebookLink: String
  facebookLink_not: String
  facebookLink_in: [String!]
  facebookLink_not_in: [String!]
  facebookLink_lt: String
  facebookLink_lte: String
  facebookLink_gt: String
  facebookLink_gte: String
  facebookLink_contains: String
  facebookLink_not_contains: String
  facebookLink_starts_with: String
  facebookLink_not_starts_with: String
  facebookLink_ends_with: String
  facebookLink_not_ends_with: String
  AND: [ContactUsWhereInput!]
  OR: [ContactUsWhereInput!]
  NOT: [ContactUsWhereInput!]
}

input ContactUsWhereUniqueInput {
  id: ID
}

scalar DateTime

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

type Event {
  id: ID!
  title: String!
  date: DateTime!
  startAt: String!
  endAt: String!
  category: String!
  price: Float!
  locationTitle: String!
  address: String!
  image: String!
  difficulty: Difficulty!
  language: String!
  details: String!
  host: Host!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  date: DateTime!
  startAt: String!
  endAt: String!
  category: String!
  price: Float!
  locationTitle: String!
  address: String!
  image: String!
  difficulty: Difficulty!
  language: String!
  details: String!
  host: HostCreateOneInput!
  reviews: ReviewCreateManyInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  category_ASC
  category_DESC
  price_ASC
  price_DESC
  locationTitle_ASC
  locationTitle_DESC
  address_ASC
  address_DESC
  image_ASC
  image_DESC
  difficulty_ASC
  difficulty_DESC
  language_ASC
  language_DESC
  details_ASC
  details_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  date: DateTime!
  startAt: String!
  endAt: String!
  category: String!
  price: Float!
  locationTitle: String!
  address: String!
  image: String!
  difficulty: Difficulty!
  language: String!
  details: String!
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  date: DateTime
  startAt: String
  endAt: String
  category: String
  price: Float
  locationTitle: String
  address: String
  image: String
  difficulty: Difficulty
  language: String
  details: String
  host: HostUpdateOneRequiredInput
  reviews: ReviewUpdateManyInput
}

input EventUpdateManyMutationInput {
  title: String
  date: DateTime
  startAt: String
  endAt: String
  category: String
  price: Float
  locationTitle: String
  address: String
  image: String
  difficulty: Difficulty
  language: String
  details: String
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  startAt: String
  startAt_not: String
  startAt_in: [String!]
  startAt_not_in: [String!]
  startAt_lt: String
  startAt_lte: String
  startAt_gt: String
  startAt_gte: String
  startAt_contains: String
  startAt_not_contains: String
  startAt_starts_with: String
  startAt_not_starts_with: String
  startAt_ends_with: String
  startAt_not_ends_with: String
  endAt: String
  endAt_not: String
  endAt_in: [String!]
  endAt_not_in: [String!]
  endAt_lt: String
  endAt_lte: String
  endAt_gt: String
  endAt_gte: String
  endAt_contains: String
  endAt_not_contains: String
  endAt_starts_with: String
  endAt_not_starts_with: String
  endAt_ends_with: String
  endAt_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  locationTitle: String
  locationTitle_not: String
  locationTitle_in: [String!]
  locationTitle_not_in: [String!]
  locationTitle_lt: String
  locationTitle_lte: String
  locationTitle_gt: String
  locationTitle_gte: String
  locationTitle_contains: String
  locationTitle_not_contains: String
  locationTitle_starts_with: String
  locationTitle_not_starts_with: String
  locationTitle_ends_with: String
  locationTitle_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  difficulty: Difficulty
  difficulty_not: Difficulty
  difficulty_in: [Difficulty!]
  difficulty_not_in: [Difficulty!]
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  details: String
  details_not: String
  details_in: [String!]
  details_not_in: [String!]
  details_lt: String
  details_lte: String
  details_gt: String
  details_gte: String
  details_contains: String
  details_not_contains: String
  details_starts_with: String
  details_not_starts_with: String
  details_ends_with: String
  details_not_ends_with: String
  host: HostWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

type Faq {
  id: ID!
  question: String!
  answer: String!
}

type FaqConnection {
  pageInfo: PageInfo!
  edges: [FaqEdge]!
  aggregate: AggregateFaq!
}

input FaqCreateInput {
  id: ID
  question: String!
  answer: String!
}

input FaqCreateManyInput {
  create: [FaqCreateInput!]
  connect: [FaqWhereUniqueInput!]
}

type FaqEdge {
  node: Faq!
  cursor: String!
}

enum FaqOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  answer_ASC
  answer_DESC
}

type FaqPreviousValues {
  id: ID!
  question: String!
  answer: String!
}

input FaqScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  AND: [FaqScalarWhereInput!]
  OR: [FaqScalarWhereInput!]
  NOT: [FaqScalarWhereInput!]
}

type FaqSubscriptionPayload {
  mutation: MutationType!
  node: Faq
  updatedFields: [String!]
  previousValues: FaqPreviousValues
}

input FaqSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FaqWhereInput
  AND: [FaqSubscriptionWhereInput!]
  OR: [FaqSubscriptionWhereInput!]
  NOT: [FaqSubscriptionWhereInput!]
}

input FaqUpdateDataInput {
  question: String
  answer: String
}

input FaqUpdateInput {
  question: String
  answer: String
}

input FaqUpdateManyDataInput {
  question: String
  answer: String
}

input FaqUpdateManyInput {
  create: [FaqCreateInput!]
  update: [FaqUpdateWithWhereUniqueNestedInput!]
  upsert: [FaqUpsertWithWhereUniqueNestedInput!]
  delete: [FaqWhereUniqueInput!]
  connect: [FaqWhereUniqueInput!]
  set: [FaqWhereUniqueInput!]
  disconnect: [FaqWhereUniqueInput!]
  deleteMany: [FaqScalarWhereInput!]
  updateMany: [FaqUpdateManyWithWhereNestedInput!]
}

input FaqUpdateManyMutationInput {
  question: String
  answer: String
}

input FaqUpdateManyWithWhereNestedInput {
  where: FaqScalarWhereInput!
  data: FaqUpdateManyDataInput!
}

input FaqUpdateWithWhereUniqueNestedInput {
  where: FaqWhereUniqueInput!
  data: FaqUpdateDataInput!
}

input FaqUpsertWithWhereUniqueNestedInput {
  where: FaqWhereUniqueInput!
  update: FaqUpdateDataInput!
  create: FaqCreateInput!
}

input FaqWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
}

input FaqWhereUniqueInput {
  id: ID
}

type Host {
  id: ID!
  email: String!
  name: String!
  image: String!
  bio: String!
}

type HostConnection {
  pageInfo: PageInfo!
  edges: [HostEdge]!
  aggregate: AggregateHost!
}

input HostCreateInput {
  id: ID
  email: String!
  name: String!
  image: String!
  bio: String!
}

input HostCreateOneInput {
  create: HostCreateInput
  connect: HostWhereUniqueInput
}

type HostEdge {
  node: Host!
  cursor: String!
}

enum HostOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  bio_ASC
  bio_DESC
}

type HostPreviousValues {
  id: ID!
  email: String!
  name: String!
  image: String!
  bio: String!
}

type HostSubscriptionPayload {
  mutation: MutationType!
  node: Host
  updatedFields: [String!]
  previousValues: HostPreviousValues
}

input HostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HostWhereInput
  AND: [HostSubscriptionWhereInput!]
  OR: [HostSubscriptionWhereInput!]
  NOT: [HostSubscriptionWhereInput!]
}

input HostUpdateDataInput {
  email: String
  name: String
  image: String
  bio: String
}

input HostUpdateInput {
  email: String
  name: String
  image: String
  bio: String
}

input HostUpdateManyMutationInput {
  email: String
  name: String
  image: String
  bio: String
}

input HostUpdateOneRequiredInput {
  create: HostCreateInput
  update: HostUpdateDataInput
  upsert: HostUpsertNestedInput
  connect: HostWhereUniqueInput
}

input HostUpsertNestedInput {
  update: HostUpdateDataInput!
  create: HostCreateInput!
}

input HostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  AND: [HostWhereInput!]
  OR: [HostWhereInput!]
  NOT: [HostWhereInput!]
}

input HostWhereUniqueInput {
  id: ID
  email: String
}

type Info {
  id: ID!
  faq(where: FaqWhereInput, orderBy: FaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Faq!]
  about: String!
  contactUs: ContactUs!
}

type InfoConnection {
  pageInfo: PageInfo!
  edges: [InfoEdge]!
  aggregate: AggregateInfo!
}

input InfoCreateInput {
  id: ID
  faq: FaqCreateManyInput
  about: String!
  contactUs: ContactUsCreateOneInput!
}

type InfoEdge {
  node: Info!
  cursor: String!
}

enum InfoOrderByInput {
  id_ASC
  id_DESC
  about_ASC
  about_DESC
}

type InfoPreviousValues {
  id: ID!
  about: String!
}

type InfoSubscriptionPayload {
  mutation: MutationType!
  node: Info
  updatedFields: [String!]
  previousValues: InfoPreviousValues
}

input InfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InfoWhereInput
  AND: [InfoSubscriptionWhereInput!]
  OR: [InfoSubscriptionWhereInput!]
  NOT: [InfoSubscriptionWhereInput!]
}

input InfoUpdateInput {
  faq: FaqUpdateManyInput
  about: String
  contactUs: ContactUsUpdateOneRequiredInput
}

input InfoUpdateManyMutationInput {
  about: String
}

input InfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  faq_every: FaqWhereInput
  faq_some: FaqWhereInput
  faq_none: FaqWhereInput
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  contactUs: ContactUsWhereInput
  AND: [InfoWhereInput!]
  OR: [InfoWhereInput!]
  NOT: [InfoWhereInput!]
}

input InfoWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAudio(data: AudioCreateInput!): Audio!
  updateAudio(data: AudioUpdateInput!, where: AudioWhereUniqueInput!): Audio
  updateManyAudios(data: AudioUpdateManyMutationInput!, where: AudioWhereInput): BatchPayload!
  upsertAudio(where: AudioWhereUniqueInput!, create: AudioCreateInput!, update: AudioUpdateInput!): Audio!
  deleteAudio(where: AudioWhereUniqueInput!): Audio
  deleteManyAudios(where: AudioWhereInput): BatchPayload!
  createContactInfo(data: ContactInfoCreateInput!): ContactInfo!
  updateContactInfo(data: ContactInfoUpdateInput!, where: ContactInfoWhereUniqueInput!): ContactInfo
  updateManyContactInfoes(data: ContactInfoUpdateManyMutationInput!, where: ContactInfoWhereInput): BatchPayload!
  upsertContactInfo(where: ContactInfoWhereUniqueInput!, create: ContactInfoCreateInput!, update: ContactInfoUpdateInput!): ContactInfo!
  deleteContactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  deleteManyContactInfoes(where: ContactInfoWhereInput): BatchPayload!
  createContactUs(data: ContactUsCreateInput!): ContactUs!
  updateContactUs(data: ContactUsUpdateInput!, where: ContactUsWhereUniqueInput!): ContactUs
  updateManyContactUses(data: ContactUsUpdateManyMutationInput!, where: ContactUsWhereInput): BatchPayload!
  upsertContactUs(where: ContactUsWhereUniqueInput!, create: ContactUsCreateInput!, update: ContactUsUpdateInput!): ContactUs!
  deleteContactUs(where: ContactUsWhereUniqueInput!): ContactUs
  deleteManyContactUses(where: ContactUsWhereInput): BatchPayload!
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createFaq(data: FaqCreateInput!): Faq!
  updateFaq(data: FaqUpdateInput!, where: FaqWhereUniqueInput!): Faq
  updateManyFaqs(data: FaqUpdateManyMutationInput!, where: FaqWhereInput): BatchPayload!
  upsertFaq(where: FaqWhereUniqueInput!, create: FaqCreateInput!, update: FaqUpdateInput!): Faq!
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteManyFaqs(where: FaqWhereInput): BatchPayload!
  createHost(data: HostCreateInput!): Host!
  updateHost(data: HostUpdateInput!, where: HostWhereUniqueInput!): Host
  updateManyHosts(data: HostUpdateManyMutationInput!, where: HostWhereInput): BatchPayload!
  upsertHost(where: HostWhereUniqueInput!, create: HostCreateInput!, update: HostUpdateInput!): Host!
  deleteHost(where: HostWhereUniqueInput!): Host
  deleteManyHosts(where: HostWhereInput): BatchPayload!
  createInfo(data: InfoCreateInput!): Info!
  updateInfo(data: InfoUpdateInput!, where: InfoWhereUniqueInput!): Info
  updateManyInfoes(data: InfoUpdateManyMutationInput!, where: InfoWhereInput): BatchPayload!
  upsertInfo(where: InfoWhereUniqueInput!, create: InfoCreateInput!, update: InfoUpdateInput!): Info!
  deleteInfo(where: InfoWhereUniqueInput!): Info
  deleteManyInfoes(where: InfoWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createSelfGuidedTour(data: SelfGuidedTourCreateInput!): SelfGuidedTour!
  updateSelfGuidedTour(data: SelfGuidedTourUpdateInput!, where: SelfGuidedTourWhereUniqueInput!): SelfGuidedTour
  updateManySelfGuidedTours(data: SelfGuidedTourUpdateManyMutationInput!, where: SelfGuidedTourWhereInput): BatchPayload!
  upsertSelfGuidedTour(where: SelfGuidedTourWhereUniqueInput!, create: SelfGuidedTourCreateInput!, update: SelfGuidedTourUpdateInput!): SelfGuidedTour!
  deleteSelfGuidedTour(where: SelfGuidedTourWhereUniqueInput!): SelfGuidedTour
  deleteManySelfGuidedTours(where: SelfGuidedTourWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  audio(where: AudioWhereUniqueInput!): Audio
  audios(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio]!
  audiosConnection(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AudioConnection!
  contactInfo(where: ContactInfoWhereUniqueInput!): ContactInfo
  contactInfoes(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactInfo]!
  contactInfoesConnection(where: ContactInfoWhereInput, orderBy: ContactInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactInfoConnection!
  contactUs(where: ContactUsWhereUniqueInput!): ContactUs
  contactUses(where: ContactUsWhereInput, orderBy: ContactUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContactUs]!
  contactUsesConnection(where: ContactUsWhereInput, orderBy: ContactUsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactUsConnection!
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  faq(where: FaqWhereUniqueInput!): Faq
  faqs(where: FaqWhereInput, orderBy: FaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Faq]!
  faqsConnection(where: FaqWhereInput, orderBy: FaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FaqConnection!
  host(where: HostWhereUniqueInput!): Host
  hosts(where: HostWhereInput, orderBy: HostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Host]!
  hostsConnection(where: HostWhereInput, orderBy: HostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HostConnection!
  info(where: InfoWhereUniqueInput!): Info
  infoes(where: InfoWhereInput, orderBy: InfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Info]!
  infoesConnection(where: InfoWhereInput, orderBy: InfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InfoConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  selfGuidedTour(where: SelfGuidedTourWhereUniqueInput!): SelfGuidedTour
  selfGuidedTours(where: SelfGuidedTourWhereInput, orderBy: SelfGuidedTourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SelfGuidedTour]!
  selfGuidedToursConnection(where: SelfGuidedTourWhereInput, orderBy: SelfGuidedTourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelfGuidedTourConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  userID: String!
  score: Int!
  comment: String!
  date: DateTime!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  userID: String!
  score: Int!
  comment: String!
}

input ReviewCreateManyInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  userID_ASC
  userID_DESC
  score_ASC
  score_DESC
  comment_ASC
  comment_DESC
  date_ASC
  date_DESC
}

type ReviewPreviousValues {
  id: ID!
  userID: String!
  score: Int!
  comment: String!
  date: DateTime!
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userID: String
  userID_not: String
  userID_in: [String!]
  userID_not_in: [String!]
  userID_lt: String
  userID_lte: String
  userID_gt: String
  userID_gte: String
  userID_contains: String
  userID_not_contains: String
  userID_starts_with: String
  userID_not_starts_with: String
  userID_ends_with: String
  userID_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateDataInput {
  userID: String
  score: Int
  comment: String
}

input ReviewUpdateInput {
  userID: String
  score: Int
  comment: String
}

input ReviewUpdateManyDataInput {
  userID: String
  score: Int
  comment: String
}

input ReviewUpdateManyInput {
  create: [ReviewCreateInput!]
  update: [ReviewUpdateWithWhereUniqueNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueNestedInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyMutationInput {
  userID: String
  score: Int
  comment: String
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateDataInput!
}

input ReviewUpsertWithWhereUniqueNestedInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateDataInput!
  create: ReviewCreateInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userID: String
  userID_not: String
  userID_in: [String!]
  userID_not_in: [String!]
  userID_lt: String
  userID_lte: String
  userID_gt: String
  userID_gte: String
  userID_contains: String
  userID_not_contains: String
  userID_starts_with: String
  userID_not_starts_with: String
  userID_ends_with: String
  userID_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type SelfGuidedTour {
  id: ID!
  title: String!
  location: String!
  duration: String!
  difficulty: Difficulty!
  petFriendly: Boolean!
  description: String!
  audio(where: AudioWhereInput, orderBy: AudioOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Audio!]
}

type SelfGuidedTourConnection {
  pageInfo: PageInfo!
  edges: [SelfGuidedTourEdge]!
  aggregate: AggregateSelfGuidedTour!
}

input SelfGuidedTourCreateInput {
  id: ID
  title: String!
  location: String!
  duration: String!
  difficulty: Difficulty!
  petFriendly: Boolean
  description: String!
  audio: AudioCreateManyInput
}

type SelfGuidedTourEdge {
  node: SelfGuidedTour!
  cursor: String!
}

enum SelfGuidedTourOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  location_ASC
  location_DESC
  duration_ASC
  duration_DESC
  difficulty_ASC
  difficulty_DESC
  petFriendly_ASC
  petFriendly_DESC
  description_ASC
  description_DESC
}

type SelfGuidedTourPreviousValues {
  id: ID!
  title: String!
  location: String!
  duration: String!
  difficulty: Difficulty!
  petFriendly: Boolean!
  description: String!
}

type SelfGuidedTourSubscriptionPayload {
  mutation: MutationType!
  node: SelfGuidedTour
  updatedFields: [String!]
  previousValues: SelfGuidedTourPreviousValues
}

input SelfGuidedTourSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SelfGuidedTourWhereInput
  AND: [SelfGuidedTourSubscriptionWhereInput!]
  OR: [SelfGuidedTourSubscriptionWhereInput!]
  NOT: [SelfGuidedTourSubscriptionWhereInput!]
}

input SelfGuidedTourUpdateInput {
  title: String
  location: String
  duration: String
  difficulty: Difficulty
  petFriendly: Boolean
  description: String
  audio: AudioUpdateManyInput
}

input SelfGuidedTourUpdateManyMutationInput {
  title: String
  location: String
  duration: String
  difficulty: Difficulty
  petFriendly: Boolean
  description: String
}

input SelfGuidedTourWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  duration: String
  duration_not: String
  duration_in: [String!]
  duration_not_in: [String!]
  duration_lt: String
  duration_lte: String
  duration_gt: String
  duration_gte: String
  duration_contains: String
  duration_not_contains: String
  duration_starts_with: String
  duration_not_starts_with: String
  duration_ends_with: String
  duration_not_ends_with: String
  difficulty: Difficulty
  difficulty_not: Difficulty
  difficulty_in: [Difficulty!]
  difficulty_not_in: [Difficulty!]
  petFriendly: Boolean
  petFriendly_not: Boolean
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  audio_every: AudioWhereInput
  audio_some: AudioWhereInput
  audio_none: AudioWhereInput
  AND: [SelfGuidedTourWhereInput!]
  OR: [SelfGuidedTourWhereInput!]
  NOT: [SelfGuidedTourWhereInput!]
}

input SelfGuidedTourWhereUniqueInput {
  id: ID
}

type Subscription {
  audio(where: AudioSubscriptionWhereInput): AudioSubscriptionPayload
  contactInfo(where: ContactInfoSubscriptionWhereInput): ContactInfoSubscriptionPayload
  contactUs(where: ContactUsSubscriptionWhereInput): ContactUsSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  faq(where: FaqSubscriptionWhereInput): FaqSubscriptionPayload
  host(where: HostSubscriptionWhereInput): HostSubscriptionPayload
  info(where: InfoSubscriptionWhereInput): InfoSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  selfGuidedTour(where: SelfGuidedTourSubscriptionWhereInput): SelfGuidedTourSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  location: String!
  image: String!
  bio: String!
  date: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  location: String!
  image: String!
  bio: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  location_ASC
  location_DESC
  image_ASC
  image_DESC
  bio_ASC
  bio_DESC
  date_ASC
  date_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  location: String!
  image: String!
  bio: String!
  date: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  location: String
  image: String
  bio: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  firstName: String
  lastName: String
  location: String
  image: String
  bio: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    